#!/usr/bin/env bash
# -*- coding: utf-8; mode: sh indent-tabs-mode: nil -*-
# SPDX-License-Identifier: AGPL-3.0-or-later

# shellcheck source=utils/lib.sh
source "$(dirname "${BASH_SOURCE[0]}")/utils/lib.sh"

# config

PYOBJECTS="."
PY_SETUP_EXTRAS='[test]'
PYLINT_OPTIONS="-m pylint -j 0 --rcfile .pylintrc"
# SPHINXOPTS=

if [ "$VERBOSE" = "1" ]; then
    SPHINX_VERBOSE="-v"
    PYLINT_VERBOSE="-v"
fi

help() {
    cat <<EOF
docs.*
  html      : build HTML documentation
  live      : autobuild HTML documentation while editing
  gh-pages  : deploy on gh-pages branch
  clean     : clean documentation build
py.*
  build     : Build python packages at ./${PYDIST}
  clean     : delete virtualenv and intermediate py files
pyenv.*
  install   : developer install into virtualenv (${PY_ENV})
  uninstall : uninstall developer installation
  cmd ...   : run command ... in virtualenv
  OK        : test if virtualenv is OK
pypi.*
  upload    : upload python packages to PyPi (to test use pypi.upload.test)
test.* :
  pylint    : lint python files
prj.*
  update    : update project files (requirements.txt)
EOF
}


# needed by sphinx-docs
export DOCS_BUILD

prj.update() {
    build_msg DATA "update requirements.txt & README.rst"
    pyenv.cmd python <<EOF
from bangbang.__pkginfo__ import *
with open("README.rst", "w", encoding="utf-8") as fh:
    fh.write(README)
with open("requirements.txt", "w", encoding="utf-8") as fh:
    fh.write(requirements_txt)
EOF
}

py.build() {
    build_msg BUILD "python package ${PYDIST}"
    pyenv.cmd python setup.py \
              sdist -d "${PYDIST}" \
              bdist_wheel --bdist-dir "${PYBUILD}" -d "${PYDIST}"
}

py.clean() {
    build_msg CLEAN pyenv
    (   set -e
        pyenv.drop
        [ "$VERBOSE" = "1" ] && set -x
        rm -rf "${PYDIST}" "${PYBUILD}" "${PY_ENV}" ./.tox ./src/*.egg-info
        find . -name '*.pyc' -exec rm -f {} +
        find . -name '*.pyo' -exec rm -f {} +
        find . -name __pycache__ -exec rm -rf {} +
    )
}

pypi.upload() {
    py.clean
    py.build
    # https://github.com/pypa/twine
    pyenv.cmd twine upload "${PYDIST}"/*
}

pypi.upload.test() {
    py.clean
    py.build
    pyenv.cmd twine upload -r testpypi "${PYDIST}"/*
}

test.pylint() {
    build_msg TEST "[pylint] python files from src/ folder"
    # shellcheck disable=SC2086
    pyenv.cmd python ${PYLINT_OPTIONS} ${PYLINT_VERBOSE} src
    dump_return $?
}

test.clean() {
    build_msg CLEAN  "test stuff"
    dump_return $?
}

main() {

    local _type
    local cmd="$1"; shift

    if [ "$cmd" == "" ]; then
        help
        err_msg "missing command"
        return 42
    fi

    case "$cmd" in
        --getenv) var="$1"; echo "${!var}";;
        --help) help;;
        --*)
            help
            err_msg "unknown option $cmd"
            return 42
            ;;
        *)
            _type="$(type -t "$cmd")"
            if [ "$_type" != 'function' ]; then
                err_msg "unknown command $1 / use --help"
                return 42
            else
                "$cmd" "$@"
            fi
            ;;
    esac
}

main "$@"
